[{"title":"Mesh","type":0,"sectionRef":"#","url":"api/Mesh","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Mesh","url":"api/Mesh#properties","content":" "},{"title":"TetraPartAssetId​","type":1,"pageTitle":"Mesh","url":"api/Mesh#TetraPartAssetId","content":"&lt;/&gt; Mesh.TetraPartAssetId: number this is the id for the free model tetrahedron meshpart I use "},{"title":"Functions​","type":1,"pageTitle":"Mesh","url":"api/Mesh#functions","content":" "},{"title":"getVertices​","type":1,"pageTitle":"Mesh","url":"api/Mesh#getVertices","content":"&lt;/&gt; Mesh.getVertices(basePart: BasePart ) → {[number]: Vertex} provides a list of vertex positions in 3d space  "},{"title":"getLines​","type":1,"pageTitle":"Mesh","url":"api/Mesh#getLines","content":"&lt;/&gt; Mesh.getLines(basePart: BasePart ) → {[string]: Line} provides a dictionary of line vertex pairs  "},{"title":"getSurfaces​","type":1,"pageTitle":"Mesh","url":"api/Mesh#getSurfaces","content":"&lt;/&gt; Mesh.getSurfaces(basePart: BasePart ) → {[Enum.NormalId]: Surface} provides a dictionary of surface geometry data  "},{"title":"solveGreedyMesh​","type":1,"pageTitle":"Mesh","url":"api/Mesh#solveGreedyMesh","content":"&lt;/&gt; Mesh.solveGreedyMesh(grid: {[Vector3 ]: boolean}) → () Performs a greedy mesh style simplification on a 3d table of boolean values  "},{"title":"getBoundingBoxAtCFrame​","type":1,"pageTitle":"Mesh","url":"api/Mesh#getBoundingBoxAtCFrame","content":"&lt;/&gt; Mesh.getBoundingBoxAtCFrame( orientation: CFrame , parts: {[number]: BasePart } ) → () Generates a smallish bounding box at cframe that contains all the parts without the need for a model. "},{"title":"Algebra","type":0,"sectionRef":"#","url":"api/Algebra","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Algebra","url":"api/Algebra#properties","content":" "},{"title":"Vector​","type":1,"pageTitle":"Algebra","url":"api/Algebra#Vector","content":"&lt;/&gt; Algebra.Vector: Vector Access to the Vector class  "},{"title":"Matrix​","type":1,"pageTitle":"Algebra","url":"api/Algebra#Matrix","content":"&lt;/&gt; Algebra.Matrix: Matrix Access to the Matrix class "},{"title":"Functions​","type":1,"pageTitle":"Algebra","url":"api/Algebra#functions","content":" "},{"title":"lerp​","type":1,"pageTitle":"Algebra","url":"api/Algebra#lerp","content":"&lt;/&gt; Algebra.lerp( a:: any, b:: any, alpha:: Alpha ) → any performs a linear interpolation on a wide set of Roblox types, as well as any custom object with a :Lerp method.  "},{"title":"ease​","type":1,"pageTitle":"Algebra","url":"api/Algebra#ease","content":"&lt;/&gt; Algebra.ease( alpha:: Alpha, easingStyle:: Enum.EasingStyle, easingDirection:: Enum.EasingDirection ) → Alpha adjusts and alpha value similar to how TweenService:GetValue.  "},{"title":"bezier​","type":1,"pageTitle":"Algebra","url":"api/Algebra#bezier","content":"&lt;/&gt; Algebra.bezier(...: Vector | Vector2 | Vector3 ) → (Alpha) → Vector | Vector2 | Vector3  takes points as parameters and returns a function that when provided an alpha will give the corresponding point on the bezier line constructed from those parameters. "},{"title":"Noise","type":0,"sectionRef":"#","url":"api/Noise","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Noise","url":"api/Noise#properties","content":" "},{"title":"Random​","type":1,"pageTitle":"Noise","url":"api/Noise#Random","content":"&lt;/&gt; Noise.Random: NoiseSolver A NoiseSolver that if shown in 2d would look like static.  "},{"title":"Simplex​","type":1,"pageTitle":"Noise","url":"api/Noise#Simplex","content":"&lt;/&gt; Noise.Simplex: NoiseSolver A NoiseSolver that if shown in 2d would look like terrain. It's optimized to run at 3 Dimensions or below, but it can handle more.  "},{"title":"Cellular​","type":1,"pageTitle":"Noise","url":"api/Noise#Cellular","content":"&lt;/&gt; Noise.Cellular: NoiseSolver A NoiseSolver that if shown in 2d would look like skin cells.  "},{"title":"Voronoi​","type":1,"pageTitle":"Noise","url":"api/Noise#Voronoi","content":"&lt;/&gt; Noise.Voronoi: NoiseSolver A NoiseSolver that if shown in 2d would look like a stained glass window "},{"title":"Math","type":0,"sectionRef":"#","url":"api/Math","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Math","url":"api/Math#types","content":" "},{"title":"Point​","type":1,"pageTitle":"Math","url":"api/Math#Point","content":"&lt;/&gt; type Point = Vector3  A point in 3d space  "},{"title":"Vertex​","type":1,"pageTitle":"Math","url":"api/Math#Vertex","content":"&lt;/&gt; type Vertex = Point A point used to create a line or shape  "},{"title":"Direction​","type":1,"pageTitle":"Math","url":"api/Math#Direction","content":"&lt;/&gt; type Direction = Vector3  An offset in 3d space  "},{"title":"Normal​","type":1,"pageTitle":"Math","url":"api/Math#Normal","content":"&lt;/&gt; type Normal = Direction A normalized direction with a magnitude of 1  "},{"title":"Axis​","type":1,"pageTitle":"Math","url":"api/Math#Axis","content":"&lt;/&gt; type Axis = Normal A normal with irrelevant polarity so that if you flip it nothing should break.  "},{"title":"Line​","type":1,"pageTitle":"Math","url":"api/Math#Line","content":"&lt;/&gt; type Line = {[number]: Vertex} A line as represented by two vertices. Vertex does not matter.  "},{"title":"Surface​","type":1,"pageTitle":"Math","url":"api/Math#Surface","content":"&lt;/&gt; type Surface = { Normal: Normal, Lines: {[number]: Line} } A surface defined by both its normal as well as the lines which compose it.  "},{"title":"Radian​","type":1,"pageTitle":"Math","url":"api/Math#Radian","content":"&lt;/&gt; type Radian = number A measurement of rotation where 2 pi is equal to a full revolution  "},{"title":"Degree​","type":1,"pageTitle":"Math","url":"api/Math#Degree","content":"&lt;/&gt; type Degree = number A measurement of rotation where 360 is equal to a full revolution  "},{"title":"Float​","type":1,"pageTitle":"Math","url":"api/Math#Float","content":"&lt;/&gt; type Float = number A non-integer real number  "},{"title":"Alpha​","type":1,"pageTitle":"Math","url":"api/Math#Alpha","content":"&lt;/&gt; type Alpha = Float A number between 0 and 1  "},{"title":"Integer​","type":1,"pageTitle":"Math","url":"api/Math#Integer","content":"&lt;/&gt; type Integer = number A number rounded to the nearest whole.  "},{"title":"Double​","type":1,"pageTitle":"Math","url":"api/Math#Double","content":"&lt;/&gt; type Double = number A number rounded to the nearest hundredths place. "},{"title":"Properties​","type":1,"pageTitle":"Math","url":"api/Math#properties","content":" "},{"title":"Geometry​","type":1,"pageTitle":"Math","url":"api/Math#Geometry","content":"&lt;/&gt; Math.Geometry: Geometry Provides access to the geometry library  "},{"title":"Mesh​","type":1,"pageTitle":"Math","url":"api/Math#Mesh","content":"&lt;/&gt; Math.Mesh: Mesh Provides access to the mesh library  "},{"title":"Algebra​","type":1,"pageTitle":"Math","url":"api/Math#Algebra","content":"&lt;/&gt; Math.Algebra: Algebra Provides access to the algebra library  "},{"title":"Noise​","type":1,"pageTitle":"Math","url":"api/Math#Noise","content":"&lt;/&gt; Math.Noise: Noise Provides access to the noise library "},{"title":"Geometry","type":0,"sectionRef":"#","url":"api/Geometry","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Geometry","url":"api/Geometry#properties","content":" "},{"title":"phi​","type":1,"pageTitle":"Geometry","url":"api/Geometry#phi","content":"&lt;/&gt; Geometry.phi: number It's a constant, no need to keep resolving for it. "},{"title":"Functions​","type":1,"pageTitle":"Geometry","url":"api/Geometry#functions","content":" "},{"title":"getLineLengths​","type":1,"pageTitle":"Geometry","url":"api/Geometry#getLineLengths","content":"&lt;/&gt; Geometry.getLineLengths(lines: {[any]: Line}) → {[any]: number} Gets length of line. Performs getLineLength on a list of lines.  "},{"title":"getLineCenters​","type":1,"pageTitle":"Geometry","url":"api/Geometry#getLineCenters","content":"&lt;/&gt; Geometry.getLineCenters(lines: {[any]: Line}) → {[any]: Point} Gets a point at center of line. Performs getLineCenter on a list of lines.  "},{"title":"getLineAxes​","type":1,"pageTitle":"Geometry","url":"api/Geometry#getLineAxes","content":"&lt;/&gt; Geometry.getLineAxes(lines: {[string]: Line}) → {[string]: Axis} Gets the axis running parallel to the line. Performs getLineAxis on a list of lines.  "},{"title":"getIfVerticesConnected​","type":1,"pageTitle":"Geometry","url":"api/Geometry#getIfVerticesConnected","content":"&lt;/&gt; Geometry.getIfVerticesConnected( a: Vertex, b: Vertex, lines: {[any]: Line} ) → boolean Finds if two verticies share a line from a list of lines.  "},{"title":"getConnectedVertices​","type":1,"pageTitle":"Geometry","url":"api/Geometry#getConnectedVertices","content":"&lt;/&gt; Geometry.getConnectedVertices( vertex: Vertex, lines: {[any]: Line} ) → {[number]: Vertex} Filters out any lines that don't connect to the main vertex.  "},{"title":"getAllVerticesFromLines​","type":1,"pageTitle":"Geometry","url":"api/Geometry#getAllVerticesFromLines","content":"&lt;/&gt; Geometry.getAllVerticesFromLines(lines: {[string]: Line}) → {[number]: Vertex} Compiles a deduplicated list of every unique vertex in a list of lines.  "},{"title":"getAllVertexConnectionsFromLines​","type":1,"pageTitle":"Geometry","url":"api/Geometry#getAllVertexConnectionsFromLines","content":"&lt;/&gt; Geometry.getAllVertexConnectionsFromLines(lines: {[string]: Line}) → {[Vertex]: {[number]: Vertex}} Creates an indexable dictionary of the vertices each vertex is connected to.  "},{"title":"getSharedVertex​","type":1,"pageTitle":"Geometry","url":"api/Geometry#getSharedVertex","content":"&lt;/&gt; Geometry.getSharedVertex( line1: Line, line2: Line ) → Vertex? Gets if two lins share a vertex.  "},{"title":"getIfRightAngle​","type":1,"pageTitle":"Geometry","url":"api/Geometry#getIfRightAngle","content":"&lt;/&gt; Geometry.getIfRightAngle( vertex: Vertex, line1: Line, line2: Line ) → boolean Finds if the two lines make a right angle at the vertex  "},{"title":"getIfRightAngleFromVertices​","type":1,"pageTitle":"Geometry","url":"api/Geometry#getIfRightAngleFromVertices","content":"&lt;/&gt; Geometry.getIfRightAngleFromVertices( sharedVertex: Vertex, a: Vertex, b: Vertex ) → boolean Finds if a set of vertices make a right angle.  "},{"title":"getRightAngleVertices​","type":1,"pageTitle":"Geometry","url":"api/Geometry#getRightAngleVertices","content":"&lt;/&gt; Geometry.getRightAngleVertices(lines: {[string]: Line}) → {[number]: Vertex} Gets a point at center of line.  "},{"title":"getIntersectionBetweenTwoLines​","type":1,"pageTitle":"Geometry","url":"api/Geometry#getIntersectionBetweenTwoLines","content":"&lt;/&gt; Geometry.getIntersectionBetweenTwoLines( line1: Line, line2: Line ) → Point? Gets the point of intersection between two lines, lerping between the closest points if none exist.  "},{"title":"getVertexOppositePointsFromLines​","type":1,"pageTitle":"Geometry","url":"api/Geometry#getVertexOppositePointsFromLines","content":"&lt;/&gt; Geometry.getVertexOppositePointsFromLines(lines: {[any]: Line}) → {[Vertex]: Point} When provided a quadrangular or triangular surface's lines it will return an indexable dictionary of the point on the lins opposite a vertex, rounding to the nearest vertex if an even number of vertices.  "},{"title":"getDiagonalLinesFromEdges​","type":1,"pageTitle":"Geometry","url":"api/Geometry#getDiagonalLinesFromEdges","content":"&lt;/&gt; Geometry.getDiagonalLinesFromEdges(lines: {[any]: Line}) → {[number]: Line} Creates a list of lines connecting opposite points on any quadrangle or triangle.  "},{"title":"getTrianglePerimeter​","type":1,"pageTitle":"Geometry","url":"api/Geometry#getTrianglePerimeter","content":"&lt;/&gt; Geometry.getTrianglePerimeter( a: Vertex, b: Vertex, c: Vertex ) → number Gets the perimeter of a triangle from its vertices  "},{"title":"getTriangleArea​","type":1,"pageTitle":"Geometry","url":"api/Geometry#getTriangleArea","content":"&lt;/&gt; Geometry.getTriangleArea( a: Vertex, b: Vertex, c: Vertex ) → number--heron'sformula Gets the area of a triangle from its vertices  "},{"title":"getIfPointIsInTriangle​","type":1,"pageTitle":"Geometry","url":"api/Geometry#getIfPointIsInTriangle","content":"&lt;/&gt; Geometry.getIfPointIsInTriangle( point: Point, a: Vertex, b: Vertex, c: Vertex ) → boolean gets if a point parallel to the surface of the triangle exists within the perimeter. All unparallel points will return false.  "},{"title":"getAngleThroughLawOfCos​","type":1,"pageTitle":"Geometry","url":"api/Geometry#getAngleThroughLawOfCos","content":"&lt;/&gt; Geometry.getAngleThroughLawOfCos( ab: Line, bc: Line, ca: Line ) → Radian gets the angle of vertex B when provided three lines composing a triangle.  "},{"title":"getAngleBetweenTwoLines​","type":1,"pageTitle":"Geometry","url":"api/Geometry#getAngleBetweenTwoLines","content":"&lt;/&gt; Geometry.getAngleBetweenTwoLines( line1: Line, line2: Line ) → Radian Converts each line into a normal then finds the angle of both normals when they're set to the same origin.  "},{"title":"getSideLengthThroughLawOfCos​","type":1,"pageTitle":"Geometry","url":"api/Geometry#getSideLengthThroughLawOfCos","content":"&lt;/&gt; Geometry.getSideLengthThroughLawOfCos( b: Radian, ab: Line, bc: Line ) → number Gets the side length CA using an the angle of vertex B  "},{"title":"getLineInwardNormal​","type":1,"pageTitle":"Geometry","url":"api/Geometry#getLineInwardNormal","content":"&lt;/&gt; Geometry.getLineInwardNormal( line: Line, centerPoint: Vector3 ) → Normal--doesnotjustaimtowardscenterpoint,onlyworksonconcaveshapes Finds a normal perpindicular to the line that faces inwards and is parallel to the surface.  "},{"title":"getClosestPointInList​","type":1,"pageTitle":"Geometry","url":"api/Geometry#getClosestPointInList","content":"&lt;/&gt; Geometry.getClosestPointInList( point: Point, list: {[number]: Point} ) → Point Finds point in list closest to provided point.  "},{"title":"getFarthestPointInList​","type":1,"pageTitle":"Geometry","url":"api/Geometry#getFarthestPointInList","content":"&lt;/&gt; Geometry.getFarthestPointInList( point: Point, list: {[number]: Point} ) → Point Finds point in list farthest to provided point  "},{"title":"getClosestPointOnLine​","type":1,"pageTitle":"Geometry","url":"api/Geometry#getClosestPointOnLine","content":"&lt;/&gt; Geometry.getClosestPointOnLine( point: Point, line: Line ) → () Finds the closest point on the line to the provided point.  "},{"title":"getLineClosestToPoint​","type":1,"pageTitle":"Geometry","url":"api/Geometry#getLineClosestToPoint","content":"&lt;/&gt; Geometry.getLineClosestToPoint( point: Point, lines: {[any]: Line} ) → Line Finds the line that comes closest to the point. Chooses arbitrarily when lines are equidistant.  "},{"title":"getCenterFromLines​","type":1,"pageTitle":"Geometry","url":"api/Geometry#getCenterFromLines","content":"&lt;/&gt; Geometry.getCenterFromLines(lines: {[any]: Line}) → Point? Gets a point at the center of a quadrangular or triangular surface when provides its lines.  "},{"title":"getSurfaceCFrameFromLines​","type":1,"pageTitle":"Geometry","url":"api/Geometry#getSurfaceCFrameFromLines","content":"&lt;/&gt; Geometry.getSurfaceCFrameFromLines( lines: {[any]: Line}, normal: Normal ) → CFrame  Returns a cframe with the YVec parallel to the surface and the XVec perpindicular to the longest line.  "},{"title":"getBoxBoundaries​","type":1,"pageTitle":"Geometry","url":"api/Geometry#getBoxBoundaries","content":"&lt;/&gt; Geometry.getBoxBoundaries( cf: CFrame , size: Vector3 ) → ( Point, Point ) Finds the min and max points on a rotated box. Min / Max status are found in object space, not global space.  "},{"title":"getPlaneIntersection​","type":1,"pageTitle":"Geometry","url":"api/Geometry#getPlaneIntersection","content":"&lt;/&gt; Geometry.getPlaneIntersection( origin: Point, normal: Normal, planeOrigin: Point, planeAxis: Axis ) → ( Point, number ) Finds intersection point and distance on a plane where normal hits plane from origin. If parallel it returns the origin the normal solves from.  "},{"title":"getNonPerpindicularNormal​","type":1,"pageTitle":"Geometry","url":"api/Geometry#getNonPerpindicularNormal","content":"&lt;/&gt; Geometry.getNonPerpindicularNormal(normal: Normal) → Normal Finds a normal that's not perpindicular to provided normal. I don't remember why I would ever need to do this, but I'm too afraid to remove it.  "},{"title":"getClosestPointToLineOnLine​","type":1,"pageTitle":"Geometry","url":"api/Geometry#getClosestPointToLineOnLine","content":"&lt;/&gt; Geometry.getClosestPointToLineOnLine( a: Line, b: Line ) → Point? When provided vertex A, vertex B, and line AC it solves for angle C Finds closest point on line a to the closest point on line b  "},{"title":"getVolume​","type":1,"pageTitle":"Geometry","url":"api/Geometry#getVolume","content":"&lt;/&gt; Geometry.getVolume(size: Vector3 ) → number Gets the volume of a box with the provided dimensions. "},{"title":"Vector","type":0,"sectionRef":"#","url":"api/Vector","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Vector","url":"api/Vector#properties","content":" "},{"title":"Size​","type":1,"pageTitle":"Vector","url":"api/Vector#Size","content":"&lt;/&gt; Vector.Size: number The dimension of the vector, for example a Vector3 would have a size of 3.  "},{"title":"Type​","type":1,"pageTitle":"Vector","url":"api/Vector#Type","content":"&lt;/&gt; Vector.Type: string An identifier for the class  "},{"title":"Magnitude​","type":1,"pageTitle":"Vector","url":"api/Vector#Magnitude","content":"&lt;/&gt; Vector.Magnitude: number The length of a line across all dimensions, similar to how the magnitude of a Vector2 is the length of the hypotenuse of a right triangle given the side lengths of X and Y. "},{"title":"Functions​","type":1,"pageTitle":"Vector","url":"api/Vector#functions","content":" "},{"title":"zero​","type":1,"pageTitle":"Vector","url":"api/Vector#zero","content":"&lt;/&gt; Vector.zero(size: number) → Vector Constructs vector with specified size and a magnitude of 0  "},{"title":"fromVector3​","type":1,"pageTitle":"Vector","url":"api/Vector#fromVector3","content":"&lt;/&gt; Vector.fromVector3(v3: Vector3 ) → Vector Constructs vector from Vector3  "},{"title":"fromVector2​","type":1,"pageTitle":"Vector","url":"api/Vector#fromVector2","content":"&lt;/&gt; Vector.fromVector2(v2: Vector2 ) → Vector Constructs vector from Vector2  "},{"title":"one​","type":1,"pageTitle":"Vector","url":"api/Vector#one","content":"&lt;/&gt; Vector.one(size: number) → Vector Provides a vector of specified size with a 1 in each dimension  "},{"title":"identity​","type":1,"pageTitle":"Vector","url":"api/Vector#identity","content":"&lt;/&gt; Vector.identity( size: number, index: number ) → Vector Returns a vector of specified size with a 1 at the specified index.  "},{"title":"new​","type":1,"pageTitle":"Vector","url":"api/Vector#new","content":"&lt;/&gt; Vector.new(...: number) → () constructs a new vector from number parameters  "},{"title":"__newindex​","type":1,"pageTitle":"Vector","url":"api/Vector#__newindex","content":"&lt;/&gt; Vector:__newindex( k: any, v: number ) → nil Disallows the user to edit values after construction, similar to Roblox Vector2s and Vector3s. Just construct a new one if you need to change something.  "},{"title":"__add​","type":1,"pageTitle":"Vector","url":"api/Vector#__add","content":"&lt;/&gt; Vector:__add(v: Vector) → Vector--add Performs an addition operation on vector  "},{"title":"__sub​","type":1,"pageTitle":"Vector","url":"api/Vector#__sub","content":"&lt;/&gt; Vector:__sub(v: Vector) → Vector--subtract Performs a subtraction operation on vector  "},{"title":"__mul​","type":1,"pageTitle":"Vector","url":"api/Vector#__mul","content":"&lt;/&gt; Vector:__mul(v: Vector) → Vector--multiply Performs a multiplication operation on vector  "},{"title":"__div​","type":1,"pageTitle":"Vector","url":"api/Vector#__div","content":"&lt;/&gt; Vector:__div(v: Vector) → Vector--divide Performs a division operation on vector  "},{"title":"__pow​","type":1,"pageTitle":"Vector","url":"api/Vector#__pow","content":"&lt;/&gt; Vector:__pow(v: Vector) → Vector--power Performs an exponent operation on vector  "},{"title":"__mod​","type":1,"pageTitle":"Vector","url":"api/Vector#__mod","content":"&lt;/&gt; Vector:__mod(v: Vector) → Vector--mod Performs a modulus operation on vector  "},{"title":"__eq​","type":1,"pageTitle":"Vector","url":"api/Vector#__eq","content":"&lt;/&gt; Vector:__eq(v: Vector) → boolean--equal Determins if two vectors are equal  "},{"title":"__tostring​","type":1,"pageTitle":"Vector","url":"api/Vector#__tostring","content":"&lt;/&gt; Vector:__tostring() → string Converts vector to a readable string. Technically this should be written vertically but that can be difficult to read in the output and as instance names.  "},{"title":"ToScalars​","type":1,"pageTitle":"Vector","url":"api/Vector#ToScalars","content":"&lt;/&gt; Vector:ToScalars() → {[number]: number} Returns the values at each dimension in a list  "},{"title":"Round​","type":1,"pageTitle":"Vector","url":"api/Vector#Round","content":"&lt;/&gt; Vector:Round(pow: number?) → Vector Returns a vector rounded to closest integer at each dimension.  "},{"title":"Floor​","type":1,"pageTitle":"Vector","url":"api/Vector#Floor","content":"&lt;/&gt; Vector:Floor(pow: number?) → Vector Returns a vector rounded to lower integer at each dimension.  "},{"title":"Ceil​","type":1,"pageTitle":"Vector","url":"api/Vector#Ceil","content":"&lt;/&gt; Vector:Ceil(pow: number?) → Vector Returns a Vector rounded to higher integer at each dimension.  "},{"title":"Cross​","type":1,"pageTitle":"Vector","url":"api/Vector#Cross","content":"&lt;/&gt; Vector:Cross(other: Vector) → Vector Returns the cross product.  "},{"title":"DotProduct​","type":1,"pageTitle":"Vector","url":"api/Vector#DotProduct","content":"&lt;/&gt; Vector:DotProduct(other: Vector) → Vector Returns the dot product.  "},{"title":"Dot​","type":1,"pageTitle":"Vector","url":"api/Vector#Dot","content":"&lt;/&gt; Vector:Dot(other: Vector) → number Returns the dot product as single number.  "},{"title":"Lerp​","type":1,"pageTitle":"Vector","url":"api/Vector#Lerp","content":"&lt;/&gt; Vector:Lerp( goal: Vector, alpha: number ) → Vector Constructs a vector interpolated between second vector by alpha.  "},{"title":"ToVector3​","type":1,"pageTitle":"Vector","url":"api/Vector#ToVector3","content":"&lt;/&gt; Vector:ToVector3() → Vector3  Takes the first two dimensions of vector and constructs a Roblox Vector3. Will use 0 for relevant dimensions if vector has a size below 3.  "},{"title":"ToVector2​","type":1,"pageTitle":"Vector","url":"api/Vector#ToVector2","content":"&lt;/&gt; Vector:ToVector2() → Vector2  Takes the first two dimensions of vector and constructs a Roblox Vector2. Will use 0 for relevant dimensions if Vector has a size below 2. "},{"title":"Matrix","type":0,"sectionRef":"#","url":"api/Matrix","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Matrix","url":"api/Matrix#properties","content":" "},{"title":"Dimensions​","type":1,"pageTitle":"Matrix","url":"api/Matrix#Dimensions","content":"&lt;/&gt; Matrix.Dimensions: Vector A 2 dimensional vector describing the length of the vectors in Y and the number of vectors in X.  "},{"title":"Type​","type":1,"pageTitle":"Matrix","url":"api/Matrix#Type","content":"&lt;/&gt; Matrix.Type: string An identifier for the class  "},{"title":"Magnitude​","type":1,"pageTitle":"Matrix","url":"api/Matrix#Magnitude","content":"&lt;/&gt; Matrix.Magnitude: number The sum of all the vector magnitudes. "},{"title":"Functions​","type":1,"pageTitle":"Matrix","url":"api/Matrix#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Matrix","url":"api/Matrix#new","content":"&lt;/&gt; Matrix.new(...: Vector) → () constructs a new matrix from vector parameters  "},{"title":"one​","type":1,"pageTitle":"Matrix","url":"api/Matrix#one","content":"&lt;/&gt; Matrix.one(dimensions: Vector) → Vector Creates a matrix with all vector values set to 1  "},{"title":"identity​","type":1,"pageTitle":"Matrix","url":"api/Matrix#identity","content":"&lt;/&gt; Matrix.identity(dimensions: Vector) → Vector Creates a matrix with any cell along the diagonal of the matrix set to 1.  "},{"title":"__index​","type":1,"pageTitle":"Matrix","url":"api/Matrix#__index","content":"&lt;/&gt; Matrix:__index(k: any) → any? Allows for the access of public variables, as well as the indexing of specific vectors within the matrix.  "},{"title":"ToVectors​","type":1,"pageTitle":"Matrix","url":"api/Matrix#ToVectors","content":"&lt;/&gt; Matrix:ToVectors() → {[number]: Vector} Similar to vectors you aren't allowed ot change properties after construction, create a new matrix instead. returns a list of vectors used to construct the matrix  "},{"title":"__add​","type":1,"pageTitle":"Matrix","url":"api/Matrix#__add","content":"&lt;/&gt; Matrix:__add(vMatVec: Matrix | Vector) → Matrix--add Performs an addition operation on the matrix and another matrix or vector.  "},{"title":"__sub​","type":1,"pageTitle":"Matrix","url":"api/Matrix#__sub","content":"&lt;/&gt; Matrix:__sub(vMatVec: Matrix | Vector) → Matrix--add Performs a subtraction operation on the matrix and another matrix or vector.  "},{"title":"__mul​","type":1,"pageTitle":"Matrix","url":"api/Matrix#__mul","content":"&lt;/&gt; Matrix:__mul(vMatVecNum: Matrix | Vector | number) → Matrix--multiply Performs a multiplication operation on the matrix and another matrix, vector, or number.  "},{"title":"__div​","type":1,"pageTitle":"Matrix","url":"api/Matrix#__div","content":"&lt;/&gt; Matrix:__div(v: Matrix | number) → Matrix--divide Performs a division operation on the matrix and another matrix or number.  "},{"title":"__pow​","type":1,"pageTitle":"Matrix","url":"api/Matrix#__pow","content":"&lt;/&gt; Matrix:__pow(v: Matrix | number) → Matrix--power Performs an exponential operation on the matrix and another matrix or number.  "},{"title":"__mod​","type":1,"pageTitle":"Matrix","url":"api/Matrix#__mod","content":"&lt;/&gt; Matrix:__mod(v: Matrix | number) → Matrix--mod Performs an modulus operation on the matrix and another matrix or number.  "},{"title":"__eq​","type":1,"pageTitle":"Matrix","url":"api/Matrix#__eq","content":"&lt;/&gt; Matrix:__eq(v: any) → boolean--equal Determines if another value is a matrix with the same vectors configuration  "},{"title":"ToRows​","type":1,"pageTitle":"Matrix","url":"api/Matrix#ToRows","content":"&lt;/&gt; Matrix:ToRows() → {[number]: Vector} Vectors are written as columns within traditional matrix layout. This returns vectors constructed from the rows.  "},{"title":"Transpose​","type":1,"pageTitle":"Matrix","url":"api/Matrix#Transpose","content":"&lt;/&gt; Matrix:Transpose() → Matrix Rotates the matrix counter clockwise 90 degrees.  "},{"title":"__tostring​","type":1,"pageTitle":"Matrix","url":"api/Matrix#__tostring","content":"&lt;/&gt; Matrix:__tostring() → string Converts matrix to string. "},{"title":"NoiseSolver","type":0,"sectionRef":"#","url":"api/NoiseSolver","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"NoiseSolver","url":"api/NoiseSolver#properties","content":" "},{"title":"Seed​","type":1,"pageTitle":"NoiseSolver","url":"api/NoiseSolver#Seed","content":"&lt;/&gt; NoiseSolver.Seed: number Sets the number used to create pseudo-randomness. This allows two solvers with the same seed to generate the same value at the same vector.  "},{"title":"Frequency​","type":1,"pageTitle":"NoiseSolver","url":"api/NoiseSolver#Frequency","content":"&lt;/&gt; NoiseSolver.Frequency: number The frequency of the solver. For a terrain map, increasing the frequency would appear to shrink things horizontally while maintaining the same elevation.  "},{"title":"Amplitude​","type":1,"pageTitle":"NoiseSolver","url":"api/NoiseSolver#Amplitude","content":"&lt;/&gt; NoiseSolver.Amplitude: number The weight the internal alpha is multiplied by. For a terrain map this would stretch things vertically, making things taller.  "},{"title":"Lacunarity​","type":1,"pageTitle":"NoiseSolver","url":"api/NoiseSolver#Lacunarity","content":"&lt;/&gt; NoiseSolver.Lacunarity: number The exponential percent change in frequency per layer of octave. A value of 2 with a frequency of 1 would have a frequency of 2 at the first octave and a frequency of 4 at the second.  "},{"title":"Persistence​","type":1,"pageTitle":"NoiseSolver","url":"api/NoiseSolver#Persistence","content":"&lt;/&gt; NoiseSolver.Persistence: number The exponential percent change in amplitude per layer of octave. A value of 0.5 reduces added amplitude by 50% per layer, meaning with an amplitude of 1 the first octave has a max range of 0.5, and the second octave has a max range of 0.25.  "},{"title":"Points​","type":1,"pageTitle":"NoiseSolver","url":"api/NoiseSolver#Points","content":"&lt;/&gt; NoiseSolver.Points: {[number]: Vector} The points used internally for proximity based maps like simplex, voronoi, and cellular.  "},{"title":"Octaves​","type":1,"pageTitle":"NoiseSolver","url":"api/NoiseSolver#Octaves","content":"&lt;/&gt; NoiseSolver.Octaves: {[number]: NoiseSolver} Octaves operate here as layered solvers, providing more detail at different configurations and scales. For terrain, the base solver might be for mountains, while smaller octaves will provide hills. "},{"title":"Functions​","type":1,"pageTitle":"NoiseSolver","url":"api/NoiseSolver#functions","content":" "},{"title":"translateVector​","type":1,"pageTitle":"NoiseSolver","url":"api/NoiseSolver#translateVector","content":"&lt;/&gt; NoiseSolver.translateVector(vec: Vector | Vector2 | Vector3 ) → Vector An easy way to convert an unknown type into a vector  "},{"title":"new​","type":1,"pageTitle":"NoiseSolver","url":"api/NoiseSolver#new","content":"&lt;/&gt; NoiseSolver.new( seed: number?, frequency: number?, amplitude: number?, lacunarity: number?, persistence: number?, pointVectors: {[number]: any}? ) → () Constructs a noise solver.  "},{"title":"_Rand​","type":1,"pageTitle":"NoiseSolver","url":"api/NoiseSolver#_Rand","content":"&lt;/&gt; NoiseSolver:_Rand(vec: Vector) → Alpha Returns a random number between 0 and 1 that should change dramatically and pseudo-randomly with small nudges. A 2d map using this would look like static.  "},{"title":"ToMatrix​","type":1,"pageTitle":"NoiseSolver","url":"api/NoiseSolver#ToMatrix","content":"&lt;/&gt; NoiseSolver:ToMatrix(size: number) → Matrix Returns a matrix relevant size with each cell filled with the solved value.  "},{"title":"Debug​","type":1,"pageTitle":"NoiseSolver","url":"api/NoiseSolver#Debug","content":"&lt;/&gt; NoiseSolver:Debug( parentGui: Frame , scale: number?, rMatrix: Matrix, gMatrix: Matrix, bMatrix: Matrix ) → nil Allows you to quickly render a 2d noise map with control over the red, green, and blue channels.  "},{"title":"GeneratePoints​","type":1,"pageTitle":"NoiseSolver","url":"api/NoiseSolver#GeneratePoints","content":"&lt;/&gt; NoiseSolver:GeneratePoints( count: number, min: Vector, max: Vector ) → nil Creates points randomly  "},{"title":"SetPoints​","type":1,"pageTitle":"NoiseSolver","url":"api/NoiseSolver#SetPoints","content":"&lt;/&gt; NoiseSolver:SetPoints(pointVectors: {[number]: Vector | Vector2 | Vector3 }) → nil Manually sets points  "},{"title":"InsertOctave​","type":1,"pageTitle":"NoiseSolver","url":"api/NoiseSolver#InsertOctave","content":"&lt;/&gt; NoiseSolver:InsertOctave(solver: NoiseSolver) → nil Inserts an octave a layer below the lowest current octave  "},{"title":"SetPersistence​","type":1,"pageTitle":"NoiseSolver","url":"api/NoiseSolver#SetPersistence","content":"&lt;/&gt; NoiseSolver:SetPersistence(value: number) → nil Sets the persistence  "},{"title":"SetLacunarity​","type":1,"pageTitle":"NoiseSolver","url":"api/NoiseSolver#SetLacunarity","content":"&lt;/&gt; NoiseSolver:SetLacunarity(value: number) → nil Sets the lacunarity  "},{"title":"SetAmplitude​","type":1,"pageTitle":"NoiseSolver","url":"api/NoiseSolver#SetAmplitude","content":"&lt;/&gt; NoiseSolver:SetAmplitude(value: number) → nil Sets the amplitude  "},{"title":"SetFrequency​","type":1,"pageTitle":"NoiseSolver","url":"api/NoiseSolver#SetFrequency","content":"&lt;/&gt; NoiseSolver:SetFrequency(value: number) → nil Sets the frequency.  "},{"title":"SetSeed​","type":1,"pageTitle":"NoiseSolver","url":"api/NoiseSolver#SetSeed","content":"&lt;/&gt; NoiseSolver:SetSeed(seed: number) → nil Sets the seed.  "},{"title":"Get​","type":1,"pageTitle":"NoiseSolver","url":"api/NoiseSolver#Get","content":"&lt;/&gt; NoiseSolver:Get(vec: Vector) → number Retrieves the value for the noise solver at that vector.  "},{"title":"Clone​","type":1,"pageTitle":"NoiseSolver","url":"api/NoiseSolver#Clone","content":"&lt;/&gt; NoiseSolver:Clone() → NoiseSolver Creates a duplicate noise solver with the same configuration.  "},{"title":"Set​","type":1,"pageTitle":"NoiseSolver","url":"api/NoiseSolver#Set","content":"&lt;/&gt; NoiseSolver:Set( seed: number?, frequency: number?, amplitude: number?, lacunarity: number?, persistence: number?, pointVectors: {[number]: Vector}? ) → nil Allows for the configuration of all properties at once with the exception of octaves. "}]