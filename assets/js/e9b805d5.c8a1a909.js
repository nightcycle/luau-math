"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[131],{7823:e=>{e.exports=JSON.parse('{"functions":[{"name":"getLineLengths","desc":"Gets length of line.\\nPerforms getLineLength on a list of lines.","params":[{"name":"lines","desc":"","lua_type":"{ [any]: Line }"}],"returns":[{"desc":"","lua_type":"{ [any]: number }\\n"}],"function_type":"static","source":{"line":48,"path":"src/Geometry/init.lua"}},{"name":"getLineCenters","desc":"Gets a point at center of line.\\nPerforms getLineCenter on a list of lines.","params":[{"name":"lines","desc":"","lua_type":"{ [any]: Line }"}],"returns":[{"desc":"","lua_type":"{ [any]: Point }\\n"}],"function_type":"static","source":{"line":62,"path":"src/Geometry/init.lua"}},{"name":"getLineAxes","desc":"Gets the axis running parallel to the line.\\nPerforms getLineAxis on a list of lines.","params":[{"name":"lines","desc":"","lua_type":"{ [string]: Line }"}],"returns":[{"desc":"","lua_type":"{ [string]: Axis }\\n"}],"function_type":"static","source":{"line":76,"path":"src/Geometry/init.lua"}},{"name":"getIfVerticesConnected","desc":"Finds if two verticies share a line from a list of lines.","params":[{"name":"a","desc":"","lua_type":"Vertex"},{"name":"b","desc":"","lua_type":"Vertex"},{"name":"lines","desc":"","lua_type":"{ [any]: Line }"}],"returns":[{"desc":"","lua_type":"boolean\\n"}],"function_type":"static","source":{"line":85,"path":"src/Geometry/init.lua"}},{"name":"getConnectedVertices","desc":"Filters out any lines that don\'t connect to the main vertex.","params":[{"name":"vertex","desc":"","lua_type":"Vertex"},{"name":"lines","desc":"","lua_type":"{ [any]: Line }"}],"returns":[{"desc":"","lua_type":"{ [number]: Vertex }\\n"}],"function_type":"static","source":{"line":95,"path":"src/Geometry/init.lua"}},{"name":"getAllVerticesFromLines","desc":"Compiles a deduplicated list of every unique vertex in a list of lines.","params":[{"name":"lines","desc":"","lua_type":"{ [string]: Line }"}],"returns":[{"desc":"","lua_type":"{ [number]: Vertex }\\n"}],"function_type":"static","source":{"line":108,"path":"src/Geometry/init.lua"}},{"name":"getAllVertexConnectionsFromLines","desc":"Creates an indexable dictionary of the vertices each vertex is connected to.","params":[{"name":"lines","desc":"","lua_type":"{ [string]: Line }"}],"returns":[{"desc":"","lua_type":"{ [Vertex]: { [number]: Vertex } }\\n"}],"function_type":"static","source":{"line":118,"path":"src/Geometry/init.lua"}},{"name":"getSharedVertex","desc":"Gets if two lins share a vertex.","params":[{"name":"line1","desc":"","lua_type":"Line"},{"name":"line2","desc":"","lua_type":"Line"}],"returns":[{"desc":"","lua_type":"Vertex?\\n"}],"function_type":"static","source":{"line":138,"path":"src/Geometry/init.lua"}},{"name":"getIfRightAngle","desc":"Finds if the two lines make a right angle at the vertex","params":[{"name":"vertex","desc":"","lua_type":"Vertex"},{"name":"line1","desc":"","lua_type":"Line"},{"name":"line2","desc":"","lua_type":"Line"}],"returns":[{"desc":"","lua_type":"boolean\\n"}],"function_type":"static","source":{"line":152,"path":"src/Geometry/init.lua"}},{"name":"getIfRightAngleFromVertices","desc":"Finds if a set of vertices make a right angle.","params":[{"name":"sharedVertex","desc":"","lua_type":"Vertex"},{"name":"a","desc":"","lua_type":"Vertex"},{"name":"b","desc":"","lua_type":"Vertex"}],"returns":[{"desc":"","lua_type":"boolean\\n"}],"function_type":"static","source":{"line":161,"path":"src/Geometry/init.lua"}},{"name":"getRightAngleVertices","desc":"Gets a point at center of line.","params":[{"name":"lines","desc":"","lua_type":"{ [string]: Line }"}],"returns":[{"desc":"","lua_type":"{ [number]: Vertex }\\n"}],"function_type":"static","source":{"line":168,"path":"src/Geometry/init.lua"}},{"name":"getIntersectionBetweenTwoLines","desc":"Gets the point of intersection between two lines, lerping between the closest points if none exist.","params":[{"name":"line1","desc":"","lua_type":"Line"},{"name":"line2","desc":"","lua_type":"Line"}],"returns":[{"desc":"","lua_type":"Point?\\n"}],"function_type":"static","source":{"line":182,"path":"src/Geometry/init.lua"}},{"name":"getVertexOppositePointsFromLines","desc":"When provided a quadrangular or triangular surface\'s lines it will return an indexable dictionary of the point on the lins opposite a vertex, rounding to the nearest vertex if an even number of vertices.","params":[{"name":"lines","desc":"","lua_type":"{ [any]: Line }"}],"returns":[{"desc":"","lua_type":"{ [Vertex]: Point }\\n"}],"function_type":"static","source":{"line":198,"path":"src/Geometry/init.lua"}},{"name":"getDiagonalLinesFromEdges","desc":"Creates a list of lines connecting opposite points on any quadrangle or triangle. ","params":[{"name":"lines","desc":"","lua_type":"{ [any]: Line }"}],"returns":[{"desc":"","lua_type":"{ [number]: Line }\\n"}],"function_type":"static","source":{"line":236,"path":"src/Geometry/init.lua"}},{"name":"getTrianglePerimeter","desc":"Gets the perimeter of a triangle from its vertices","params":[{"name":"a","desc":"","lua_type":"Vertex"},{"name":"b","desc":"","lua_type":"Vertex"},{"name":"c","desc":"","lua_type":"Vertex"}],"returns":[{"desc":"","lua_type":"number\\n"}],"function_type":"static","source":{"line":255,"path":"src/Geometry/init.lua"}},{"name":"getTriangleArea","desc":"Gets the area of a triangle from its vertices","params":[{"name":"a","desc":"","lua_type":"Vertex"},{"name":"b","desc":"","lua_type":"Vertex"},{"name":"c","desc":"","lua_type":"Vertex"}],"returns":[{"desc":"","lua_type":"number --heron\'s formula\\n"}],"function_type":"static","source":{"line":263,"path":"src/Geometry/init.lua"}},{"name":"getIfPointIsInTriangle","desc":"gets if a point parallel to the surface of the triangle exists within the perimeter. All unparallel points will return false.","params":[{"name":"point","desc":"","lua_type":"Point"},{"name":"a","desc":"","lua_type":"Vertex"},{"name":"b","desc":"","lua_type":"Vertex"},{"name":"c","desc":"","lua_type":"Vertex"}],"returns":[{"desc":"","lua_type":"boolean\\n"}],"function_type":"static","source":{"line":279,"path":"src/Geometry/init.lua"}},{"name":"getAngleThroughLawOfCos","desc":"gets the angle of vertex B when provided three lines composing a triangle.","params":[{"name":"ab","desc":"","lua_type":"Line"},{"name":"bc","desc":"","lua_type":"Line"},{"name":"ca","desc":"","lua_type":"Line"}],"returns":[{"desc":"","lua_type":"Radian\\n"}],"function_type":"static","source":{"line":287,"path":"src/Geometry/init.lua"}},{"name":"getAngleBetweenTwoLines","desc":"Converts each line into a normal then finds the angle of both normals when they\'re set to the same origin.","params":[{"name":"line1","desc":"","lua_type":"Line"},{"name":"line2","desc":"","lua_type":"Line"}],"returns":[{"desc":"","lua_type":"Radian\\n"}],"function_type":"static","source":{"line":304,"path":"src/Geometry/init.lua"}},{"name":"getSideLengthThroughLawOfCos","desc":"Gets the side length CA using an the angle of vertex B","params":[{"name":"b","desc":"","lua_type":"Radian"},{"name":"ab","desc":"","lua_type":"Line"},{"name":"bc","desc":"","lua_type":"Line"}],"returns":[{"desc":"","lua_type":"number\\n"}],"function_type":"static","source":{"line":314,"path":"src/Geometry/init.lua"}},{"name":"getLineInwardNormal","desc":"Finds a normal perpindicular to the line that faces inwards and is parallel to the surface.","params":[{"name":"line","desc":"","lua_type":"Line"},{"name":"centerPoint","desc":"","lua_type":"Vector3\\n"}],"returns":[{"desc":"","lua_type":"Normal --does not just aim towards center point, only works on concave shapes\\n"}],"function_type":"static","source":{"line":321,"path":"src/Geometry/init.lua"}},{"name":"getClosestPointInList","desc":"Finds point in list closest to provided point.","params":[{"name":"point","desc":"","lua_type":"Point"},{"name":"list","desc":"","lua_type":"{ [number]: Point }"}],"returns":[{"desc":"","lua_type":"Point\\n"}],"function_type":"static","source":{"line":339,"path":"src/Geometry/init.lua"}},{"name":"getFarthestPointInList","desc":"Finds point in list farthest to provided point","params":[{"name":"point","desc":"","lua_type":"Point"},{"name":"list","desc":"","lua_type":"{ [number]: Point }"}],"returns":[{"desc":"","lua_type":"Point\\n"}],"function_type":"static","source":{"line":353,"path":"src/Geometry/init.lua"}},{"name":"getClosestPointOnLine","desc":"Finds the closest point on the line to the provided point.","params":[{"name":"point","desc":"","lua_type":"Point"},{"name":"line","desc":"","lua_type":"Line"}],"returns":[],"function_type":"static","source":{"line":367,"path":"src/Geometry/init.lua"}},{"name":"getLineClosestToPoint","desc":"Finds the line that comes closest to the point. Chooses arbitrarily when lines are equidistant.","params":[{"name":"point","desc":"","lua_type":"Point"},{"name":"lines","desc":"","lua_type":"{ [any]: Line }"}],"returns":[{"desc":"","lua_type":"Line\\n"}],"function_type":"static","source":{"line":379,"path":"src/Geometry/init.lua"}},{"name":"getCenterFromLines","desc":"Gets a point at the center of a quadrangular or triangular surface when provides its lines. ","params":[{"name":"lines","desc":"","lua_type":"{ [any]: Line }"}],"returns":[{"desc":"","lua_type":"Point?\\n"}],"function_type":"static","source":{"line":394,"path":"src/Geometry/init.lua"}},{"name":"getSurfaceCFrameFromLines","desc":"Returns a cframe with the YVec parallel to the surface and the XVec perpindicular to the longest line.","params":[{"name":"lines","desc":"","lua_type":"{ [any]: Line }"},{"name":"normal","desc":"","lua_type":"Normal"}],"returns":[{"desc":"","lua_type":"CFrame\\n"}],"function_type":"static","source":{"line":420,"path":"src/Geometry/init.lua"}},{"name":"getBoxBoundaries","desc":"Finds the min and max points on a rotated box. Min / Max status are found in object space, not global space.","params":[{"name":"cf","desc":"","lua_type":"CFrame"},{"name":"size","desc":"","lua_type":"Vector3"}],"returns":[{"desc":"","lua_type":"Point"},{"desc":"","lua_type":"Point"}],"function_type":"static","source":{"line":443,"path":"src/Geometry/init.lua"}},{"name":"getPlaneIntersection","desc":"Finds intersection point and distance on a plane where normal hits plane from origin. If parallel it returns the origin the normal solves from.","params":[{"name":"origin","desc":"","lua_type":"Point"},{"name":"normal","desc":"","lua_type":"Normal"},{"name":"planeOrigin","desc":"","lua_type":"Point"},{"name":"planeAxis","desc":"","lua_type":"Axis\\n"}],"returns":[{"desc":"","lua_type":"Point"},{"desc":"","lua_type":"number"}],"function_type":"static","source":{"line":451,"path":"src/Geometry/init.lua"}},{"name":"getNonPerpindicularNormal","desc":"Finds a normal that\'s not perpindicular to provided normal. I don\'t remember why I would ever need to do this, but I\'m too afraid to remove it.","params":[{"name":"normal","desc":"","lua_type":"Normal"}],"returns":[{"desc":"","lua_type":"Normal\\n"}],"function_type":"static","source":{"line":469,"path":"src/Geometry/init.lua"}},{"name":"getClosestPointToLineOnLine","desc":"When provided vertex A, vertex B, and line AC it solves for angle C\\nFinds closest point on line a to the closest point on line b ","params":[{"name":"a","desc":"","lua_type":"Line"},{"name":"b","desc":"","lua_type":"Line"}],"returns":[{"desc":"","lua_type":"Point?\\n"}],"function_type":"static","source":{"line":483,"path":"src/Geometry/init.lua"}},{"name":"triangulate2D","desc":"Gets the volume of a box with the provided dimensions.\\nCreates a list of triangles out of a sequential list of Vector2 or 3s, including support for a list of holes created with similar vertex sequences.","params":[{"name":"vertices","desc":"","lua_type":"PerimeterSequence<Vector2>"},{"name":"holes","desc":"","lua_type":"{[number]: PerimeterSequence<Vector2>}?"}],"returns":[{"desc":"","lua_type":"{[number]: PerimeterSequence<Vector2>}\\n"}],"function_type":"static","source":{"line":511,"path":"src/Geometry/init.lua"}},{"name":"flattenPerimeterSequence","desc":"Flattens a list of Vector3s into Vector2s using the zAxis","params":[{"name":"sequence","desc":"","lua_type":"PerimeterSequence<Vector3>"},{"name":"origin","desc":"","lua_type":"CFrame"}],"returns":[{"desc":"","lua_type":"PerimeterSequence<Vector2>"},{"desc":"","lua_type":"{[Vector2]: Vector3}"}],"function_type":"static","source":{"line":587,"path":"src/Geometry/init.lua"}},{"name":"triangulate3D","desc":"Triangulates a list of 3d sequential points similar to triangulate2D.","params":[{"name":"origin","desc":"","lua_type":"CFrame"},{"name":"perimeter","desc":"","lua_type":"PerimeterSequence<Vector3>"},{"name":"holes","desc":"","lua_type":"{[number]: PerimeterSequence<Vector3>}?"}],"returns":[{"desc":"","lua_type":"{[number]: PerimeterSequence<Vector3>}\\n"}],"function_type":"static","source":{"line":601,"path":"src/Geometry/init.lua"}}],"properties":[{"name":"phi","desc":"It\'s a constant, no need to keep resolving for it.","lua_type":"number","source":{"line":40,"path":"src/Geometry/init.lua"}}],"types":[],"name":"Geometry","desc":"A long list of geometry related functions. Consider rounding your vectors to the nearest hundredth as the smallest difference can fail an equality test.","source":{"line":30,"path":"src/Geometry/init.lua"}}')}}]);