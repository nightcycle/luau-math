"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[62],{70978:e=>{e.exports=JSON.parse('{"functions":[{"name":"translateVector","desc":"An easy way to convert an unknown type into a vector","params":[{"name":"vec","desc":"","lua_type":"Vector | Vector2 | Vector3"}],"returns":[{"desc":"","lua_type":"Vector\\n"}],"function_type":"static","source":{"line":18,"path":"src/Noise/Solver.lua"}},{"name":"_Rand","desc":"Returns a random number between 0 and 1 that should change dramatically and pseudo-randomly with small nudges. A 2d map using this would look like static.","params":[{"name":"vec","desc":"","lua_type":"Vector"}],"returns":[{"desc":"","lua_type":"Alpha\\n"}],"function_type":"method","source":{"line":40,"path":"src/Noise/Solver.lua"}},{"name":"ToMatrix","desc":"Returns a matrix relevant size with each cell filled with the solved value.","params":[{"name":"size","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"Matrix\\n"}],"function_type":"method","source":{"line":106,"path":"src/Noise/Solver.lua"}},{"name":"Debug","desc":"Allows you to quickly render a 2d noise map with control over the red, green, and blue channels.","params":[{"name":"parentGui","desc":"","lua_type":"Frame"},{"name":"scale","desc":"","lua_type":"number?"},{"name":"rMatrix","desc":"","lua_type":"Matrix"},{"name":"gMatrix","desc":"","lua_type":"Matrix"},{"name":"bMatrix","desc":"","lua_type":"Matrix"}],"returns":[{"desc":"","lua_type":"nil\\n"}],"function_type":"method","source":{"line":125,"path":"src/Noise/Solver.lua"}},{"name":"GeneratePoints","desc":"Creates points randomly","params":[{"name":"count","desc":"","lua_type":"number"},{"name":"min","desc":"","lua_type":"Vector"},{"name":"max","desc":"","lua_type":"Vector"}],"returns":[{"desc":"","lua_type":"nil\\n"}],"function_type":"method","source":{"line":183,"path":"src/Noise/Solver.lua"}},{"name":"SetPoints","desc":"Manually sets points","params":[{"name":"pointVectors","desc":"","lua_type":"{ [number]: Vector | Vector2 | Vector3 }"}],"returns":[{"desc":"","lua_type":"nil\\n"}],"function_type":"method","source":{"line":204,"path":"src/Noise/Solver.lua"}},{"name":"InsertOctave","desc":"Inserts an octave a layer below the lowest current octave","params":[{"name":"solver","desc":"","lua_type":"NoiseSolver"}],"returns":[{"desc":"","lua_type":"nil\\n"}],"function_type":"method","source":{"line":212,"path":"src/Noise/Solver.lua"}},{"name":"SetPersistence","desc":"Sets the persistence","params":[{"name":"value","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"nil\\n"}],"function_type":"method","source":{"line":220,"path":"src/Noise/Solver.lua"}},{"name":"SetLacunarity","desc":"Sets the lacunarity","params":[{"name":"value","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"nil\\n"}],"function_type":"method","source":{"line":228,"path":"src/Noise/Solver.lua"}},{"name":"SetAmplitude","desc":"Sets the amplitude","params":[{"name":"value","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"nil\\n"}],"function_type":"method","source":{"line":236,"path":"src/Noise/Solver.lua"}},{"name":"SetFrequency","desc":"Sets the frequency.","params":[{"name":"value","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"nil\\n"}],"function_type":"method","source":{"line":244,"path":"src/Noise/Solver.lua"}},{"name":"SetSeed","desc":"Sets the seed.","params":[{"name":"seed","desc":"","lua_type":"number"}],"returns":[{"desc":"","lua_type":"nil\\n"}],"function_type":"method","source":{"line":252,"path":"src/Noise/Solver.lua"}},{"name":"Get","desc":"Retrieves the value for the noise solver at that vector.","params":[{"name":"vec","desc":"","lua_type":"Vector"}],"returns":[{"desc":"","lua_type":"number\\n"}],"function_type":"method","source":{"line":260,"path":"src/Noise/Solver.lua"}},{"name":"Clone","desc":"Creates a duplicate noise solver with the same configuration.","params":[],"returns":[{"desc":"","lua_type":"NoiseSolver\\n"}],"function_type":"method","source":{"line":266,"path":"src/Noise/Solver.lua"}},{"name":"Set","desc":"Allows for the configuration of all properties at once with the exception of octaves.","params":[{"name":"seed","desc":"","lua_type":"number?"},{"name":"frequency","desc":"","lua_type":"number?"},{"name":"amplitude","desc":"","lua_type":"number?"},{"name":"lacunarity","desc":"","lua_type":"number?"},{"name":"persistence","desc":"","lua_type":"number?"},{"name":"pointVectors","desc":"","lua_type":"{ [number]: Vector}?\\n"}],"returns":[{"desc":"","lua_type":"nil\\n"}],"function_type":"method","source":{"line":273,"path":"src/Noise/Solver.lua"}},{"name":"new","desc":"Constructs a noise solver.","params":[{"name":"seed","desc":"","lua_type":"number?"},{"name":"frequency","desc":"","lua_type":"number?"},{"name":"amplitude","desc":"","lua_type":"number?"},{"name":"lacunarity","desc":"","lua_type":"number?"},{"name":"persistence","desc":"","lua_type":"number?"},{"name":"pointVectors","desc":"","lua_type":"{ [number]: any }?\\n"}],"returns":[],"function_type":"static","source":{"line":344,"path":"src/Noise/Solver.lua"}}],"properties":[{"name":"Seed","desc":"Sets the number used to create pseudo-randomness. This allows two solvers with the same seed to generate the same value at the same vector.","lua_type":"number","source":{"line":300,"path":"src/Noise/Solver.lua"}},{"name":"Frequency","desc":"The frequency of the solver. For a terrain map, increasing the frequency would appear to shrink things horizontally while maintaining the same elevation.","lua_type":"number","source":{"line":304,"path":"src/Noise/Solver.lua"}},{"name":"Amplitude","desc":"The weight the internal alpha is multiplied by. For a terrain map this would stretch things vertically, making things taller.","lua_type":"number","source":{"line":308,"path":"src/Noise/Solver.lua"}},{"name":"Lacunarity","desc":"The exponential percent change in frequency per layer of octave. A value of 2 with a frequency of 1 would have a frequency of 2 at the first octave and a frequency of 4 at the second.","lua_type":"number","source":{"line":312,"path":"src/Noise/Solver.lua"}},{"name":"Persistence","desc":"The exponential percent change in amplitude per layer of octave. A value of 0.5 reduces added amplitude by 50% per layer, meaning with an amplitude of 1 the first octave has a max range of 0.5, and the second octave has a max range of 0.25.","lua_type":"number","source":{"line":316,"path":"src/Noise/Solver.lua"}},{"name":"Points","desc":"The points used internally for proximity based maps like simplex, voronoi, and cellular.","lua_type":"{[number]: Vector}","source":{"line":320,"path":"src/Noise/Solver.lua"}},{"name":"Octaves","desc":"Octaves operate here as layered solvers, providing more detail at different configurations and scales. For terrain, the base solver might be for mountains, while smaller octaves will provide hills.","lua_type":"{[number]: NoiseSolver}","source":{"line":324,"path":"src/Noise/Solver.lua"}}],"types":[],"name":"NoiseSolver","desc":"A N-Dimensional matrix class meant to work with the N-Dimensional Vector class","source":{"line":4,"path":"src/Noise/Solver.lua"}}')}}]);